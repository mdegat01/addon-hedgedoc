#!/usr/bin/with-contenv bashio
# shellcheck shell=bash
# ==============================================================================
# Home Assistant Add-on: Hedgedoc
# Runs Hedgedoc
# ==============================================================================

readonly ENV_LEVEL=production
readonly CONFIG_FILE=/etc/hedgedoc/config.json
readonly HTTP_PORT=3000
declare host
declare port
declare username
declare password
declare log_level
database=hedgedoc

# --- OVERWRITABLE ENVS ---
# If user sets these in `env_vars` their value wins

# Changing this HedgeDoc default to let users decide if they want this or not
# If user uses the same URL for multiple apps returning this can break things
export CMD_HSTS_ENABLE=false

# --- LOAD ENV_VARS ---
# Load user's custom environment variables
for var in $(bashio::config 'env_vars|keys'); do
    name=$(bashio::config "env_vars[${var}].name")
    value=$(bashio::config "env_vars[${var}].value")
    if [[ ${name} =~ SECRET ]]; then
        bashio::log.info "Setting ${name} to ******"
    else
        bashio::log.info "Setting ${name} to ${value}"
    fi
    export "${name}=${value}"
done

# Set DB URL
if ! bashio::config.is_empty 'remote_mysql_host'; then
    host=$(bashio::config 'remote_mysql_host')
    port=$(bashio::config 'remote_mysql_port')
    username=$(bashio::config 'remote_mysql_username')
    password=$(bashio::config 'remote_mysql_password')
    database=$(bashio::config 'remote_mysql_database')
else
    host=$(bashio::services 'mysql' 'host')
    port=$(bashio::services 'mysql' 'port')
    username=$(bashio::services 'mysql' 'username')
    password=$(bashio::services 'mysql' 'password')
fi

# --- NON-OVERWRITEABLE ENVS ---
# If user sets these in `env_vars` our value wins

# Set DB URL
export "CMD_DB_URL=mysql://${username}:${password}@${host}:${port}/${database}"

# Set access location info if present
if bashio::config.true 'access.use_ssl'; then
    export CMD_PROTOCOL_USESSL=true
fi
if ! bashio::config.is_empty 'access.domain'; then
    export "CMD_DOMAIN=$(bashio::config 'access.domain')"
fi
if bashio::config.true 'access.add_port'; then
    export CMD_URL_ADDPORT=true
fi

# Set session configs if present
if ! bashio::config.is_empty 'access.session_secret'; then
    export "CMD_SESSION_SECRET=$(bashio::config 'access.session_secret')"
fi
if bashio::config.exists 'access.session_days'; then
    days="$(bashio::config 'access.session_days')"
    export "CMD_SESSION_LIFE=$(( days * 86400000 ))"
fi

# Disable email registration if option is set to false (allowed by default)
if bashio::config.false 'access.allow_email_registration'; then
    bashio::log.info "Disabling email registration."
    export CMD_ALLOW_EMAIL_REGISTER=false
fi

# Set log level
case "$(bashio::config 'log_level')" in \
    trace)      ;& \
    debug)      log_level='debug' && export DEBUG=true ;; \
    notice)     ;& \
    warning)    log_level='warn' ;; \
    error)      ;& \
    fatal)      log_level='error' ;; \
    *)          log_level='info' ;; \
esac;
export CMD_LOGLEVEL="${log_level}"
bashio::log.info "Hedgedoc log level set to ${log_level}"

export "NODE_ENV=${ENV_LEVEL}"
export "CMD_CONFIG_FILE=${CONFIG_FILE}"
export "CMD_PORT=${HTTP_PORT}"

cd /opt/hedgedoc || :

# run database migrations
s6-setuidgid abc ./node_modules/sequelize-cli/lib/sequelize db:migrate || exit

bashio::log.info 'Handing over control to Hedgedoc...'
exec s6-setuidgid abc \
    /usr/bin/node app.js
